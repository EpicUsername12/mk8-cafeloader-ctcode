#ifndef KART_VEHICLE_MOVE_H
#define KART_VEHICLE_MOVE_H

#include <basis/seadTypes.h>
#include <stdint.h>

namespace object {
typedef class KartVehicleMove KartVehicleMove;
}

#include <mk8/object/Kart/KartRigidBody.h>
#include <mk8/object/Kart/Move/KartVehicleDash.h>
#include <mk8/object/Kart/Move/KartVehicleDrift.h>
#include <mk8/object/Kart/Move/KartVehicleGlide.h>
#include <mk8/object/Kart/KartVehicleNet.h>

namespace object {
class KartVehicleMove : public KartRigidBody {
  public:
    KartVehicle* vehicle;
    KartVehicleCpu* vehicleCpu;
    KartVehicleNet* vehicleNet;
    KartVehicleDrift* vehicleDrift;
    KartVehicleDash* vehicleDash;
    KartVehicleGlide* vehicleGlide;
    void* field_F8;
    float field_FC;
    float field_100;
    float field_104;
    void* field_108;
    void* field_10C;
    void* field_110;
    int field_114;
    void* field_118;
    int field_11C;
    int field_120;
    int field_124;
    int field_128;
    int field_12C;
    int field_130;
    int field_134;
    int field_138;
    int field_13C;
    int field_140;
    int field_144;
    int field_148;
    int field_14C;
    int field_150;
    int field_154;
    int field_158;
    int field_15C;
    int field_160;
    int field_164;
    int field_168;
    int field_16C;
    int field_170;
    int field_174;
    int field_178;
    int field_17C;
    int field_180;
    int field_184;
    int field_188;
    int field_18C;
    int field_190;
    int field_194;
    int field_198;
    int field_19C;
    int field_1A0;
    int field_1A4;
    int field_1A8;
    int field_1AC;
    int field_1B0;
    int field_1B4;
    int field_1B8;
    int field_1BC;
    int field_1C0;
    uint8_t onGround;
    uint8_t field_1C5;
    uint8_t field_1C6;
    uint8_t field_1C7;
    int field_1C8;
    int field_1CC;
    int field_1D0;
    int field_1D4;
    float onDirtRate;
    int field_1DC;
    int field_1E0;
    int field_1E4;
    int field_1E8;
    int field_1EC;
    int field_1F0;
    int field_1F4;
    int field_1F8;
    int field_1FC;
    int field_200;
    int field_204;
    int field_208;
    int field_20C;
    int field_210;
    int field_214;
    float flying;
    uint8_t isAntiGravity;
    uint8_t field_21D;
    uint8_t field_21E;
    uint8_t field_21F;
    float gravityDir[3];
    int field_22C;
    int field_230;
    int field_234;
    int field_238;
    int field_23C;
    int field_240;
    int field_244;
    int field_248;
    int field_24C;
    int field_250;
    int field_254;
    int field_258;
    int field_25C;
    int field_260;
    int field_264;
    int field_268;
    int field_26C;
    int field_270; // float[] drive dir -> unk size
    int field_274;
    int field_278;
    int field_27C;
    int field_280;
    int field_284;
    int field_288;
    int field_28C;
    int field_290;
    int field_294;
    int field_298;
    int field_29C;
    int field_2A0;
    int field_2A4;
    int field_2A8;
    int field_2AC;
    int field_2B0;
    int field_2B4;
    int field_2B8;
    int field_2BC;
    int field_2C0;
    float speedXaxis;
    float speedYaxis;
    float speedZaxis;
    float speedXaxis2;
    float speedYaxis2;
    float speedZaxis2;
    float rotation;
    int field_2E0;
    int field_2E4;
    float driveSpd;
    float driveSpdRatio;
    float driveSpdRatioAbs;
    int field_2F4;
    int field_2F8;
    int field_2FC;
    int field_300;
    int field_304;
    int field_308;
    int field_30C;
    int field_310;
    int field_314;
    int field_318;
    int field_31C;
    int field_320;
    int field_324;
    int field_328;
    int field_32C;
    int field_330;
    int field_334;
    int field_338;
    int field_33C;
    int field_340;
    int field_344;
    int field_348;
    int field_34C;
    int field_350;
    int field_354;
    int field_358;
    uint8_t isAntiGCollSpin;
    uint8_t field_35D;
    uint8_t field_35E;
    uint8_t field_35F;
    int field_360;
    int field_364;
    int field_368;
    int field_36C;
    int field_370;
    int field_374;
    int field_378;
    int field_37C;
    int field_380;
    int field_384;
    int field_388;
    int field_38C;
    int field_390;
    int field_394;
    int field_398;
    int field_39C;
    int field_3A0;
    int field_3A4;
    int field_3A8;
    int field_3AC;
    float driveSpdMax;
    int field_3B4;
    int field_3B8;
    int field_3BC;
    int field_3C0;
    int field_3C4;
    int field_3C8;
    int field_3CC;
    int field_3D0;
    int field_3D4;
    int field_3D8;
    int field_3DC;
    int field_3E0;
    int field_3E4;
    int field_3E8;
    int field_3EC;
    int field_3F0;
    int field_3F4;
    int field_3F8;
    int field_3FC;
    int field_400;
    int field_404;
    int field_408;
    int field_40C;
    int field_410;
    int field_414;
    int field_418;
    int field_41C;
    int field_420;
    int field_424;
    int field_428;
    int field_42C;
    int field_430;
    int field_434;
    int field_438;
    float acceleration;
    int field_440;
    int field_444;
    int field_448;
    int field_44C;
    int field_450;
    int field_454;
    int field_458;
    int field_45C;
    int field_460;
    int field_464;
    int field_468;
    int field_46C;
    int field_470;
    int field_474;
    int field_478;
    int field_47C;
    int field_480;
    int field_484;
    int field_488;
    int field_48C;
    int field_490;
    int field_494;
    int field_498;
    int field_49C;
    int field_4A0;
    int field_4A4;
    int field_4A8;
    int field_4AC;
    int field_4B0;
    int field_4B4;
    int field_4B8;
    int field_4BC;
    int field_4C0;
    int field_4C4;
    int field_4C8;
    float posMove;
    int field_4D0;
    int field_4D4;
    int field_4D8;
    int field_4DC;
    int field_4E0;
    int field_4E4;
    int field_4E8;
    int field_4EC;
    float posMoveLen;
    int field_4F4;
    float posMoveLenFront;
    int field_4FC;
    int field_500;
    int field_504;
    int field_508;
    int field_50C;
    int field_510;
    int field_514;
    int field_518;
    int field_51C;
    int field_520;
    int field_524;
    int field_528;
    int field_52C;
};
} // namespace object

static_assert(sizeof(object::KartVehicleMove) == 0x530, "Class doesn't match game class size");

#endif